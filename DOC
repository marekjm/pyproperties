Help on module pyproperties:

NAME
    pyproperties - Working with *.properties files.

DESCRIPTION
    pyproperites aims to ease manipulation, interaction and use of *.properties files in Python 3.x programs
    by providing methods like merge(), complete(), join(), parse() and store(). 
    
    It features:
        *   merging different properties with merge() method,
        *   comleteing different properties with complete() method,
        *   getter for single and multiple ('foo.*') properties,
        *   setter for single and multiple ('foo.*') properties,
        *   joining multiple properties files with join() method,
        *   storing loaded properties while preserving comments and empty lines,
        *   parsing loaded properties,
        *   parsing single lines,
        *   referencing other properties values with $(foo.bar) syntax, 
        *   removing and poping single an multiple properties, 
        *   guessing types of properties (str, int, float) and casting them during load and post-load,
        *   securing your work by providing you two dictionaries - one for saved work and one as a 'working copy',
        *   pyproperites is capable of reading properties splitted into several lines,

CLASSES
    builtins.object
        Properties
    
    class Properties(builtins.object)
     |  This class provides methods for working with properties files. 
     |  You should call it with a path pointing to the file you want to load.
     |  
     |  Methods defined here:
     |  
     |  __extract__(self)
     |      Extracts lines containing valid properties strings from loaded source to self.properties 
     |      It parses self.source line by line. 
     |      Every line begining with # is considered comment and not parsed. 
     |      Lines containing only whitespace are also not parsed.
     |  
     |  __getkey__(self, line, strip=True)
     |      Extracts key from given line and returns it. 
     |      If the line is comment or is an empty string returns empty string.
     |  
     |  __getvalue__(self, line)
     |      Extracts value from given line and returns it. 
     |      If the line is comment or is an empty string returns empty string.
     |  
     |  __init__(self, path='', type_convert=False)
     |      If you give a path as an argument it will be loaded and processed as properties file. 
     |      If you call Properties() without an argument created object will be "blank" - in this case you will have to call 
     |      foo.read( path, type_convert ) to load some properties.
     |      You can pass type_convert as True to tell pyproperites that it should guess the type of the property 
     |      and convert it accordingly.
     |      
     |      This method (__init__) just calls read() with arguments passed to itself.
     |  
     |  __isvalidline__(self, line)
     |      Checks if the line contains valid property string. 
     |      It isn't empty string and its first character is not #.
     |  
     |  __loadd__(self, path)
     |      This method reads directory tree as if it was properties file.
     |  
     |  __loadf__(self, path)
     |      This method loads properties file from given path to a self.source list. 
     |      It also strips it of any newline character and whitespace on both sides but leaves it otherwise unprocessed.
     |  
     |  __split__(self)
     |      This methode converts self.properties from list containing extracted lines to a dictionary.
     |  
     |  __tcast__(self, identifier)
     |      Converts property of the given key from str (default) to int or float if needed.
     |  
     |  __tcasts__(self, identifier)
     |      Converts properties from str (default) to int or float (if needed).
     |  
     |  __typeguess__(self, prop)
     |      Tries to guess the type of property (initially all properties are stored as strings) and 
     |      convert it accordingly.
     |      It can guess three types: int, float and string.
     |      If property contains only digits and a dot inside - it's considered float (re: "^[0-9]*\.[0-9]+$").
     |      If property contains only digits and not a dot inside - it's considered int (re: "^[0-9]+$").
     |      Otherwise: property is considered str.
     |  
     |  complete(self, props, prefix='')
     |      This methode completes base dictionary with properties of the given one. 
     |      If the base does not have some property it will be added. 
     |      Values of the existing properties will be not overwritten.
     |  
     |  get(self, identifier, parsed=False, cast=False)
     |      Returns value of identifier. 
     |      If identifier is not found KeyError is raised.
     |      If parsed is set to True value will be parsed before returning.
     |  
     |  getgroups(self)
     |      Returns list of properties-groups in the internal dictionary. 
     |      Group is understood by two or more properties which can 
     |      be obtained with the same gets() identifier.
     |      
     |      For example:
     |          language.0=Python 2.x
     |          language.1=Python 3.x
     |      will form group with identifer 'language.*'. 
     |      
     |      And:
     |          customer.0.address=Some Street 16.
     |          customer.1.address=Other Street 17.
     |      will form group with identifer 'customer.*.address'. 
     |      
     |      But:
     |          person.name=John
     |          person.surname=Average
     |      will not form a group even if gets('person.*') will return 
     |      list of length greater than two.
     |      
     |      This is because only digits are considered as 'groupers'.
     |  
     |  getkeysof(self, value)
     |      Returns list of keys containing given value. 
     |      Returns empty list if no key was matched.
     |  
     |  getnames(self)
     |      Returns sorted list of the property names.
     |  
     |  gets(self, identifier, parsed=False, cast=False)
     |      Returns dict of properties which names matched pattern given as identifier.
     |      If parsed is set to True values will be parsed before returning.
     |  
     |  getsingles(self)
     |      Returns list of properties which do not 
     |      belong to any group.
     |  
     |  join(self, path, prefix=' ')
     |      Loads external properties and completes base. 
     |      You can pass 'prefix' as empty string to add properties without prefix. 
     |      Prefix defaluts to joined modules name. 
     |      Source of joined properties is appended to base source.
     |  
     |  melt(self, properties)
     |      Completes and merges 'properties' with the base. 
     |      Source of melted properties is appended to base source.
     |  
     |  merge(self, properties, with_prefix='')
     |      This methode base dictionary with the given one. 
     |      If the base does not have some property it will not be added. 
     |      Values of the existing properties will be overwritten. 
     |      
     |      If prefix is specified only properties which are preceded with 
     |      this key will have their value changed.
     |  
     |  parse(self, cast=False)
     |      This methode parses and returns parsed self.properties
     |  
     |  parseline(self, value)
     |      This method searches for every $(reference) string in given line and 
     |      replaces it with value of corresponding property.
     |  
     |  pop(self, identifier, cast=False)
     |      This methode removes specified property from interal dictionary and returns its value. 
     |      Removed property will be not saved using store().
     |  
     |  pops(self, identifier, cast=False)
     |      This method removes properties matching given pattern from interal dictionary and returns a dict created from them. 
     |      Removed properties will be not saved using store().
     |  
     |  read(self, path, cast=False)
     |      Reads properties file and processes it to be available in Python 3 program.
     |      This method defines self.path and extracts name of loaded properties file and stores it in self.name.
     |      Then runs these methods in following order:
     |          self.__load__( path )
     |          self.__extract__()
     |          self.__split__()
     |      You can pass cast as True to tell pyproperites that it should guess the type of the property 
     |      and convert it accordingly (the __tcasts__ method will be called).
     |  
     |  refresh(self, overwrite=True)
     |      Refreshes from file. Missing values are added.
     |      If 'overwrite' is set to True existing values are overwritten - merge() is used.
     |      'overwrite' defaults to True.
     |      Values which are not found in file are not deleted.
     |  
     |  reload(self)
     |      Reloads from file. Missing values are added. Existing values are overwritten. 
     |      Values which are not found in file are deleted.
     |  
     |  remove(self, identifier)
     |      This methode removes specified property from interal dictionary. 
     |      Removed property will be not saved using store().
     |  
     |  removes(self, identifier)
     |      This methode removes properties matching given pattern from interal dictionary. 
     |      Removed properties will be not saved using store().
     |  
     |  rsave(self)
     |      Undoes changes made in self.properties by moving self.propsorigin to self.properties
     |      and self.srcorigin to self.source
     |  
     |  save(self)
     |      Saves changes made in self.properties by moving self.properties to self.propsorigin
     |      and self.source to self.srcorigin
     |  
     |  set(self, identifier, value)
     |      Sets key to value.
     |  
     |  sets(self, identifier, value, *args, **kwargs)
     |      Sets every property which name matched pattern given as identifier to value. 
     |      You can pass more than one value. If more keys are found than values passed 
     |      last value is passed to every key above number of values. 
     |      After completing sort() method is used on keys list so the first value goes to first key. 
     |      If the key is in kwargs its value if taken from the dict and the value counter is not increased. 
     |      If you want to keyword a property which name contains a dot character "." you should use __DOT__ 
     |      as a substitute for this character - 'foo__DOT__bar' will be converted to 'foo.bar'.
     |  
     |  store(self, path='')
     |      Writes properties to given 'path'.
     |      'path' defaults to self.path
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  __dict__
     |      dictionary for instance variables (if defined)
     |  
     |  __weakref__
     |      list of weak references to the object (if defined)

DATA
    __changes__ = 3
    __major__ = 0
    __minor__ = 1

VERSION
    0.1.3

FILE
    /home/triviuss/RAWD/Python3/Projects/pyproperties/modules/pyproperties.py



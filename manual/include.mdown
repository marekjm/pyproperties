#### Including properties
###### _version: `0.2.3.1`_

###### [Index](index.mdown)
----

`__include__` directive works similar way to the `#include` found in C/C++. 

The idea to implement it came from [this](http://commons.apache.org/configuration/howto_properties.html) site on [apache.org](http://apache.org) but 
it's functionality is expanded a little bit and the name of _special key_ is changed from `include` to `__include__`.


In `pyproperties` you can pass some arguments to `__include__`.  


1.  `as` which will add prefix to all included properties,
2.  `hidden` which will comment all included properties,
3.  `hidden.as` which will comment all included properties _and_ add prefix to them,


----


##### Example

    __include__=/home/some/file.properties
    
    avogardo=6.02e+23
    pi=3.14


----


    __include__.as.number=/home/some/file.properties
    
    number.avogardo=6.02e+23
    number.pi=3.14


----


    __include__.hidden=/home/some/file.properties
    
    #avogardo=6.02e+23
    #pi=3.14


----


    __include__.hidden.as.number=/home/some/file.properties
    
    #number.avogardo=6.02e+23
    #number.pi=3.14


----


##### Paths

`_include()` can deal with absolute and relative paths.  

__Important detail:__ relative ***path is relative to file in which it will be included and not working directory***. 
When reading from relative path - path of the file inside which include is performed will be appended to the path being included.  
But it is important to remember that the manipulation on path is only internal and the changes are temporary - 
when doing something with the include tuple you will need to enter the original path - as it was written in the file.


----

##### Methods

To ease manipulation of `__include__`s version `0.2.2` introduced these methods: 
`addinclude()`, `rminclude()`, `purgeinclude()`, `stripinclude()`. 
Version `0.2.3.1` also introduced `listincludes()`.


&nbsp;

##### _Methods: `addinclude()`_

`addinclude()` is used to add `__include__` directives to properties. They are stored in `includes` instance variable. 
Each entry is a three-element tuple containing _path_, _prefix_ and _status_ (hidden/not-hidden).  

Examples:

    ('/home/user/foo.properties', 'foo', False)
    ('/home/user/foo.properties', '', True)


&nbsp;

##### _Methods: `rminclude()`_

`rminclude()` is used to remove `__include__` directives from `includes` instance variable. 
This method is of no use after saving the properties and reading them because then all directives are processed and 
replaced with contents of files they are pointing to.


&nbsp;

##### _Methods: `purgeinclude()`_

`purgeinclude()` is used to remove `__include__` directive from `includes` instance variable **AND** 
all properties which came from this `__include__`.  


&nbsp;

#### _Methods: `stripinclude()`_ 

This method is used to remove all properties which were added by given include but not to remove the include directive.  


&nbsp;

#### _Methods: `listincludes()`_ 

Returns list of all include-tuples.

----

##### Storing `__include__`, how `__include__`s are being stored

Only `__include__`s added via library are being stored in a form of directive.  
When a file that contained `__include__` directive is stored the directive itself is not stored - only properties added by it are stored.  

To store read `__include__` as a directive use `stripinclude()` - it will first purge it from the object and 
then add it as a directive.

----

SEE ALSO:  
[merging](merging.mdown)  
[completing](completing.mdown)  
[joining](joining.mdown)  
[saving](saving.mdown)
TYPECASTING IN PYPROPERTIES.


    IMPORTANT SECTION.

        Typecasting is provided by three internal methods:
    *   __typeguess__: guesses type of property,
    *   __tcast__: casts single property,
    *   __tcasts__: casts multiple properties,

        Guessing is done with regular expressions. They are easily available 
    in sourcecode and I don't want to include them here to avoid this manual 
    going out-of-date. 

        This functionality is not exposed - although you can call __tcast__ and 
    __tcasts__ whenever you wish it is not recommended. The only exception to 
    call them directly is when you want to typecast your properties after parsing 
    them. I can imagine that something has to be merged or updated and I understand 
    this. 

        It is worth remembering that __tcast__ and __typecasts__ methods DO NOT 
    return anything. If you want to get typecasted value from non-pre-typecasted 
    property set get() and gets() both have functionality providing typecasting. 
    You can just call them with 'cast' argument set to True.


--------------------------------------------------------------------------------


    The actual content of this manual.

        Typecasting can be tricky if you want to have numerals formed from 
    different values. It is because parseline() method treat every value as 
    a string. 
        Imagine situation in which you have 3 properties:

            point.before=3
            point.after=.14
            pi=$(point.before)$(point.after)

        It is easy to spot that they are forming the PI number. 
    Now, consider these to possibilities.

        foo.typecasts( "point.*" )
        point.before=3
        point.after=0.14
        pi=30.14

        (parse -> typecast)
        point.before=3
        point.after=.14
        pi=3.14

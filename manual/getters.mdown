#### Getters in pyproperties
###### _version: `0.3.1`_

###### [Index](index.mdown)
----


`pyproperties` comes with many handy getters. There are three basic get-type methods:  

*   `get()`
*   `gets()`,
*   `getre()`,

----

##### `get()`

Is used to get single properties for example `customer.0.name`.
It does not do anything more than that. 

You can pass `parse` argument as `True` if you want `get()` to 
try to parse value before returning it.  
You can pass `cast` argument as `True` if you want `get()` to 
try to convert type of a property before returning its value.  

If both `parse` and `cast` are passed as `True` value is parsed 
and then its type is casted if neccessary.


----

##### `gets()`

Is designed to return groups of properties. It is achieved by passing keys like this one `customer.*.name`

Every property in properties dictionary which key will match the pattern will be added to list which will be returned by `gets()`.
`gets()` returns list of tuples: `[('foo', 'Foo'), ('bar', 'Bar')]`. 

Output of `gets()` can be easily converted to dictionary just by passing it to `dict()` builtin.

    p = pyproperties.Properties()
    
    p.gets("foo.*")
    [('foo.0':'Foo')]
    
    dict(p.gets("foo.*"))
    {'foo.0':'Foo'}


----

##### `getre()`

The only difference between `getre()` and `gets()` is that the `getre()` accepts custom regular expression patterns and 
will not modify them (see escaping dots and replacing `*` in `gets()`). 

----

SEE ALSO:  
[removers](removers.mdown)  
[setters](setters.mdown)
